# -*- coding: utf-8 -*-
"""Assignment 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AbaIqn-XzWcazZ25GMGsQK724RvLvxn6
"""

import torch
import torch.nn as nn

class CNNModel(nn.Module):
    def __init__(self, num_classes=10):
        super(CNNModel, self).__init__()
        # First Conv2D: 3 input channels (RGB), 16 output channels, 3x3 kernel, stride 1, padding 1
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.relu1 = nn.ReLU()
        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)  # MaxPooling2D with 2x2 kernel, stride 2

        # Second Conv2D: 16 input channels, 32 output channels, 3x3 kernel, stride 1, padding 1
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.relu2 = nn.ReLU()
        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)  # MaxPooling2D with 2x2 kernel, stride 2

        # Flatten the output
        self.flatten = nn.Flatten()
        # First Fully Connected layer: Input size 32*16*16 (after two pooling layers), output 100 units
        self.fc1 = nn.Linear(32 * 16 * 16, 100)
        self.relu3 = nn.ReLU()
        # Second Fully Connected layer: 100 input units, 10 output units
        self.fc2 = nn.Linear(100, num_classes)

    def forward(self, x):
        # Forward pass
        x = self.pool1(self.relu1(self.conv1(x)))
        x = self.pool2(self.relu2(self.conv2(x)))
        x = self.flatten(x)
        x = self.relu3(self.fc1(x))
        x = self.fc2(x)
        return x

# Test the model (optional)
if __name__ == "__main__":
    model = CNNModel()
    input_tensor = torch.randn(1, 3, 64, 64)  # Test with 64x64x3 input
    output = model(input_tensor)
    print(output.shape)  # Should output torch.Size([1, 10])

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
from model import CNNModel

# Data preprocessing: Resize CIFAR10 images (32x32) to 64x64
transform = transforms.Compose([
    transforms.Resize(64),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])

# Load CIFAR10 dataset
train_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
test_dataset = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)

train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)

# Initialize model, loss, and optimizer
model = CNNModel(num_classes=10)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Training loop (5 epochs)
model.train()
for epoch in range(5):
    running_loss = 0.0
    for images, labels in train_loader:
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
    print(f"Epoch {epoch+1}, Loss: {running_loss / len(train_loader):.4f}")

# Save model
torch.save(model.state_dict(), 'cnn_model.pth')
print("Model saved as cnn_model.pth")

# Evaluate accuracy
model.eval()
correct = 0
total = 0
with torch.no_grad():
    for images, labels in test_loader:
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()
print(f"Test Accuracy: {100 * correct / total:.2f}%")

from flask import Flask, request, jsonify
from PIL import Image
import torch
from torchvision import transforms
from model import CNNModel

app = Flask(__name__)

# Load model
model = CNNModel(num_classes=10)
model.load_state_dict(torch.load('cnn_model.pth'))
model.eval()

# Preprocessing
transform = transforms.Compose([
    transforms.Resize(64),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])

# CIFAR10 classes
classes = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

@app.route('/predict', methods=['POST'])
def predict():
    if 'image' not in request.files:
        return jsonify({'error': 'No image provided'}), 400
    file = request.files['image']
    image = Image.open(file.stream).convert('RGB')
    image = transform(image).unsqueeze(0)

    with torch.no_grad():
        output = model(image)
        prediction = torch.argmax(output, dim=1).item()
    return jsonify({'class': classes[prediction]})

if __name__ == '__main__':
    app.run(debug=True)

# Commented out IPython magic to ensure Python compatibility.
!apt-get install git
!git config --global user.email "yl5819@columbia.edu"
!git config --global user.name "yl5819-arch"
!mkdir Assignment2-CNN
# %cd Assignment2-CNN
